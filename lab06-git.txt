Git Intro 2 Activity
==================

A. Form teams
-------------

Form a 2-person team. Try to find someone who uses the same platform as you (e.g., Windows, Linux, etc.). If you can't, that's fine. If you are the odd-person-out, join a team of 2 with permission of your TA.

Make a repo on GitHub.

Complete the exercises below, and fill in your answers in the spaces provided below each question.
Once you have completed all the exercises and filled in this file with your answers,
add this file to your working directory (which you will create in section G) and push it to your team repo.
This file is the deliverable for this lab, so make sure you do not forget to push it at the end!

1.  List your team members below.

    ```
    Elton Mwale
    Yat Chan

    ```


D. Getting help
---------------

Run the following commands.

    git help
    git help -ag
    git help init

1.  What does `git help` do?

    ```
    'git help' will list all the commend you could do with git.

    ```

2.  What does `-ag` cause `git help` to do?

    ```
    It also list all the available git commands along with the common Git guides.


    ```

G. Basic commands
-----------------

Open the terminal. Navigate to your team’s repository directory.

Create a directory inside of your team repository which will act as your submission directory for this lab.
The directory should be named according to the last names of your team members following the format below.

    <member1LastName>_<member2LastName>_Lab6

Use a plain text editor to create `names.txt` inside the directory you just created.
Put the names of your team in the file. Save and exit.

Run `git status` before and after each of these commands.

    git add names.txt
    git commit –m “Add our names.”
    git log

1.  What kind of information does `git status` report?

    ```

    It reports information about the state of your working tree.

    ```

2.  What does `git add names.txt` do?

    ```
    Tracks names.txt to the working tree.
    Such that its ready to be staged for commit.

    ```

3.  What does `git commit -m "Add our names."` do?

    ```

    Stages all of the tracked (added) files for commit and adds the message "Add our names to the commit".

    ```

Use a plain text editor to create the following files:

-   `birthdays.txt` - Put your birthdays in this file. (you are not obligated to use real information here)

-   `movies.txt` - Put the last movie each of you watched in alphabetical order.

Run `git status` before and after each of these commands.

    git add .
    git commit		Note:  Commit will open the vim editor; write a multi-line commit
						   message, save and quit (press esc and then type :wq).
    git log

4.  What does `git add .` do? What do you think `.` means?

    ```

    Recursively adds all of the untracked file changes in the current directory.

    ```

5.  What does `git commit` (without -m) do?

    ```

    Stages all of the tracked files for a commit. Will open vi so that you can add a commit message.

    ```

6.  If you want to write a more detailed commit message (which is
    good practice) what command would you use?

    ```

    git commit

    ```

7.  What does `git log do`?

    ```

    Shows all of the commits to your working copy of the repository.

    ```


H. Stage/Cache/Index
--------------------

Do the following:

-   Modify `names.txt` so that names are listed in *Last, First* format,
    one per line.

-   Modify `movies.txt` so they are in reverse alphabetical order
    by title.

-   Create a new file `foods.txt` that contains your favorite foods (one
    for each team member).

Run the following commands:

    git add names.txt
    git status

1.  Below write each file name under the state that its changes are
    currently in. Compose a definition for each state.

    **Staged**

    ```

    names.txt

    ```

    **Unstaged**

    ```

    movies.txt

    ```

    **Untracked**

    ```

    foods.txt

    ```

1.  If you run `git commit` what changes will be committed (***DON’T DO IT***)?

    ```
    names.txt


    ```

2.  What command do you run to stage changes?

    ```

    git add

    ```

3.  What command do you run to unstage changes?

    ```

    git reset

    ```

Run the following commands:

    git diff
    git diff --cached

1.  What does `git diff` display?

    ```

    Shows you the differences of the unstaged changes

    ```

2.  What does `git diff --cached` display?

    ```

    Shows you the differences of the staged changes

    ```

3.  Formulate a sequence of commands to unstage changes to `names.txt`,
    and stage the changes to `movies.txt`. Write them here. Execute your commands and
    confirm they worked.

    ```

    git reset HEAD names.txt
    git add movies.txt

    ```

4.  Edit `movies.txt`, change any one of the movies, and save it. Then
    run `git status`. What do you observe? Explain what you think is
    going on.

    ```

    Editing a staged file unstages it

    ```

5.  Delete `names.txt`. Then run `git status`. What do you observe?
    Explain what you think is going on.

    ```

    Git can see that a tracked file is no longer in the directory so it asks you to untrack it

    ```

6.  Rename `movies.txt` to `last-movies`. Run `git status`. Observe
    and explain.

    ```

    In order to rename a file you must untrack it from the working tree and then stage the new named file

    ```

7.  Formulate a sequence of commands to stage all changes including the
    untracked file and commit (with any reasonable message you like).
    Execute them.

    ```

    git add .
    git commit -m "Adding everything"

    ```

8.  In git vernacular, `index`, `cache`, and `stage` all refer to the
    same thing. What does it hold?

    ```

    All of the changes you want to add to the repository

    ```

9.  Why have a `stage`? Why not just commit all changes since the last
    commit?

    ```

    To selectively add some things and not others. Like if you just wanted to change the documentation of the repository but still had a new feature you were working on.
    You wouldn't have to add that incomplete feature in order to stage your documentation.

    ```

I. Undo
-------

Run the following commands:

    git log
    git status
    git reset --soft "HEAD^"
    git log

1.  What does `git reset --soft ``"HEAD^" `do?

    ```



    ```

Run the following commands:

    git commit –m "Redo."
    git log
    git status
    git reset --hard "HEAD^"
    git log
    git status

1.  What does `git reset --hard ``"HEAD^"`` `do?

    ```

    Removes your commits and brings all of the files in the commit to the stage state

    ```

2.  What is the difference between `--hard` and `--soft`?

    ```

    --soft will put all of your committed files to the stage state and --hard will remove all changes and point your head to last commit.

    ```

3.  What do you think `HEAD` means?

    ```
    HEAD is a reference to the last commit in the currently checked-out branch.

    ```

4.  What do you think `HEAD^` means?

    ```
    The last last commit.

    ```

5.  On Canvas, put two things: 1) a link to your repo (as a comment on the assignment), and 2) submit this document.

6. Push this document, completed, to your repo.

J. Helpful resources
--------------------

-   <https://git-scm.com/doc>

-   <https://www.atlassian.com/git/tutorials/>

-   github-git-cheat-sheet.pdf on class website

K. Copyright and Licensing
--------------------------

Adapted from:

Copyright 2016, Darci Burdge and Stoney Jackson SOME RIGHTS RESERVED

This work is licensed under the Creative Commons Attribution-ShareAlike
4.0 International License. To view a copy of this license, visit
<http://creativecommons.org/licenses/by-sa/4.0/> .
